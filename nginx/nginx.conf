# Use a low number of workers for a local PoC
worker_processes 1;

# Define where NGINX can find our Lua libraries.
# The ';;' is a default path placeholder.

events {
    worker_connections 1024;
}

http {
    error_log /dev/stderr info;

    resolver 127.0.0.11;

    lua_package_path "/usr/local/share/lua/5.1/?.lua;;";
    # Define a shared memory zone for caching the provider's keys (JWKS). This is crucial for performance.
    lua_shared_dict oidc_cache 10m;

    # Define our backend service. The name 'backend' will be resolved by Docker Compose.
    upstream backend {
        server backend:3000;
    }

    server {
        listen 80;

        location / {
            
            # This block executes Lua code for every request to this location.
            access_by_lua_block {
                -- 1. Load the OpenID Connect library
                local oidc = require("resty.openidc")

                -- 2. Configure validation options
                local opts = {
                    discovery = "http://keycloak:8080/realms/poc-nginx/.well-known/openid-configuration",
                    --redirect_uri_path = "/backend",
                    -- We are only validating a bearer token, not performing a login flow.
                    --bearer_only = "yes",

                    -- Use the shared memory cache we defined above.
                    -- shared_dict_key = "oidc_cache",
                    -- Optional: Be explicit about the supported signature algorithm
                    -- token_signing_alg_values_supported = {"RS256"}
                }

                -- 3. Run the validation! This handles everything.
                local res, err = oidc.bearer_jwt_verify(opts)
                                
                if err then
                    -- If validation fails (no token, invalid, expired), deny access.
                    ngx.log(ngx.ERR, "Token validation failed.") 
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.header["WWW-Authenticate"] = "Bearer error=\"invalid_token\", error_description=\"" .. err .. "\""
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
                
                --ngx.log(ngx.INFO, "--- Validated Token Claims ---")
                --for key, val in pairs(res) do
                --    ngx.log(ngx.INFO, "claim: ", key, " = ", tostring(val))
                --end
                --ngx.log(ngx.INFO, "----------------------------")
                ngx.log(ngx.INFO, "User authenticated: ", res.sub)
                -- 4. If validation succeeds, add the user unique ID ('sub' claim) to a new header.
                ngx.req.set_header("X-User-ID", res.sub)

                
            }

            # If the Lua code above doesn't exit, the request is allowed.
            # Proxy the request to our backend service.
            proxy_pass http://backend;
        }
    }
}